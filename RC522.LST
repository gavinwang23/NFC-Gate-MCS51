C51 COMPILER V9.00   RC522                                                                 10/11/2019 10:20:02 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE RC522
OBJECT MODULE PLACED IN RC522.OBJ
COMPILER INVOKED BY: D:\MDK5\C51\BIN\C51.EXE RC522.C COMPACT OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          #include <intrins.h>
   2          #include <REGX52.H>
   3          #include "main.h"
   4          #include "mfrc522.h"
   5          
   6          #define MAXRLEN 18
   7                           
   8          void delay2(unsigned int z)
   9          {
  10   1        unsigned int x,y;
  11   1        for(x=z;x>0;x--)
  12   1        for(y=110;y>0;y--); 
  13   1      }  
  14          
  15                     
  16          /////////////////////////////////////////////////////////////////////
  17          //功    能：寻卡
  18          //参数说明: req_code[IN]:寻卡方式
  19          //                0x52 = 寻感应区内所有符合14443A标准的卡
  20          //                0x26 = 寻未进入休眠状态的卡
  21          //          pTagType[OUT]：卡片类型代码
  22          //                0x4400 = Mifare_UltraLight
  23          //                0x0400 = Mifare_One(S50)
  24          //                0x0200 = Mifare_One(S70)
  25          //                0x0800 = Mifare_Pro(X)
  26          //                0x4403 = Mifare_DESFire
  27          //返    回: 成功返回MI_OK
  28          /////////////////////////////////////////////////////////////////////
  29          char PcdRequest(unsigned char req_code,unsigned char *pTagType)
  30          {
  31   1         char status;  
  32   1         unsigned int  unLen;
  33   1         unsigned char ucComMF522Buf[MAXRLEN]; 
  34   1      
  35   1         ClearBitMask(Status2Reg,0x08);
  36   1         WriteRawRC(BitFramingReg,0x07);
  37   1         SetBitMask(TxControlReg,0x03);
  38   1       
  39   1         ucComMF522Buf[0] = req_code;
  40   1      
  41   1         status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,1,ucComMF522Buf,&unLen);
  42   1         
  43   1         if ((status == MI_OK) && (unLen == 0x10))
  44   1         {    
  45   2             *pTagType     = ucComMF522Buf[0];
  46   2             *(pTagType+1) = ucComMF522Buf[1];
  47   2         }
  48   1         else
  49   1         {   status = MI_ERR;  
  50   2       
  51   2      
  52   2      
  53   2        }
  54   1         
  55   1         return status;
C51 COMPILER V9.00   RC522                                                                 10/11/2019 10:20:02 PAGE 2   

  56   1      }
  57          
  58          /////////////////////////////////////////////////////////////////////
  59          //功    能：防冲撞
  60          //参数说明: pSnr[OUT]:卡片序列号，4字节
  61          //返    回: 成功返回MI_OK
  62          /////////////////////////////////////////////////////////////////////  
  63          char PcdAnticoll(unsigned char *pSnr)
  64          {
  65   1          char status;
  66   1          unsigned char i,snr_check=0;
  67   1          unsigned int  unLen;
  68   1          unsigned char ucComMF522Buf[MAXRLEN]; 
  69   1          
  70   1      
  71   1          ClearBitMask(Status2Reg,0x08);
  72   1          WriteRawRC(BitFramingReg,0x00);
  73   1          ClearBitMask(CollReg,0x80);
  74   1       
  75   1          ucComMF522Buf[0] = PICC_ANTICOLL1;
  76   1          ucComMF522Buf[1] = 0x20;
  77   1      
  78   1          status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,2,ucComMF522Buf,&unLen);
  79   1      
  80   1          if (status == MI_OK)
  81   1          {
  82   2             for (i=0; i<4; i++)
  83   2               {   
  84   3                   *(pSnr+i)  = ucComMF522Buf[i];
  85   3                   snr_check ^= ucComMF522Buf[i];
  86   3      
  87   3               }
  88   2               if (snr_check != ucComMF522Buf[i])
  89   2               {   status = MI_ERR;    }
  90   2          }
  91   1          
  92   1          SetBitMask(CollReg,0x80);
  93   1          return status;
  94   1      }
  95          
  96          /////////////////////////////////////////////////////////////////////
  97          //功    能：选定卡片
  98          //参数说明: pSnr[IN]:卡片序列号，4字节
  99          //返    回: 成功返回MI_OK
 100          /////////////////////////////////////////////////////////////////////
 101          char PcdSelect(unsigned char *pSnr)
 102          {
 103   1          char status;
 104   1          unsigned char i;
 105   1          unsigned int  unLen;
 106   1          unsigned char ucComMF522Buf[MAXRLEN]; 
 107   1          
 108   1          ucComMF522Buf[0] = PICC_ANTICOLL1;
 109   1          ucComMF522Buf[1] = 0x70;
 110   1          ucComMF522Buf[6] = 0;
 111   1          for (i=0; i<4; i++)
 112   1          {
 113   2            ucComMF522Buf[i+2] = *(pSnr+i);
 114   2            ucComMF522Buf[6]  ^= *(pSnr+i);
 115   2          }
 116   1          CalulateCRC(ucComMF522Buf,7,&ucComMF522Buf[7]);
 117   1        
C51 COMPILER V9.00   RC522                                                                 10/11/2019 10:20:02 PAGE 3   

 118   1          ClearBitMask(Status2Reg,0x08);
 119   1      
 120   1          status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,9,ucComMF522Buf,&unLen);
 121   1          
 122   1          if ((status == MI_OK) && (unLen == 0x18))
 123   1          {   status = MI_OK;  }
 124   1          else
 125   1          {   status = MI_ERR;    }
 126   1      
 127   1          return status;
 128   1      }
 129          
 130          /////////////////////////////////////////////////////////////////////
 131          //功    能：验证卡片密码
 132          //参数说明: auth_mode[IN]: 密码验证模式
 133          //                 0x60 = 验证A密钥
 134          //                 0x61 = 验证B密钥 
 135          //          addr[IN]：块地址
 136          //          pKey[IN]：密码
 137          //          pSnr[IN]：卡片序列号，4字节
 138          //返    回: 成功返回MI_OK
 139          /////////////////////////////////////////////////////////////////////               
 140          char PcdAuthState(unsigned char auth_mode,unsigned char addr,unsigned char *pKey,unsigned char *pSnr)
 141          {
 142   1          char status;
 143   1          unsigned int  unLen;
 144   1          unsigned char i,ucComMF522Buf[MAXRLEN]; 
 145   1      
 146   1          ucComMF522Buf[0] = auth_mode;
 147   1          ucComMF522Buf[1] = addr;
 148   1          for (i=0; i<6; i++)
 149   1          {    ucComMF522Buf[i+2] = *(pKey+i);   }
 150   1          for (i=0; i<6; i++)
 151   1          {    ucComMF522Buf[i+8] = *(pSnr+i);   }
 152   1       //   memcpy(&ucComMF522Buf[2], pKey, 6); 
 153   1       //   memcpy(&ucComMF522Buf[8], pSnr, 4); 
 154   1          
 155   1          status = PcdComMF522(PCD_AUTHENT,ucComMF522Buf,12,ucComMF522Buf,&unLen);
 156   1          if ((status != MI_OK) || (!(ReadRawRC(Status2Reg) & 0x08)))
 157   1          {   status = MI_ERR;   }
 158   1          
 159   1          return status;
 160   1      }
 161          
 162          /////////////////////////////////////////////////////////////////////
 163          //功    能：读取M1卡一块数据
 164          //参数说明: addr[IN]：块地址
 165          //          pData[OUT]：读出的数据，16字节
 166          //返    回: 成功返回MI_OK
 167          ///////////////////////////////////////////////////////////////////// 
 168          char PcdRead(unsigned char addr,unsigned char *pData)
 169          {
 170   1          char status;
 171   1          unsigned int  unLen;
 172   1          unsigned char i,ucComMF522Buf[MAXRLEN]; 
 173   1      
 174   1          ucComMF522Buf[0] = PICC_READ;
 175   1          ucComMF522Buf[1] = addr;
 176   1          CalulateCRC(ucComMF522Buf,2,&ucComMF522Buf[2]);
 177   1         
 178   1          status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,4,ucComMF522Buf,&unLen);
 179   1          if ((status == MI_OK) && (unLen == 0x90))
C51 COMPILER V9.00   RC522                                                                 10/11/2019 10:20:02 PAGE 4   

 180   1       //   {   memcpy(pData, ucComMF522Buf, 16);   }
 181   1          {
 182   2              for (i=0; i<16; i++)
 183   2              {    *(pData+i) = ucComMF522Buf[i];   }
 184   2          }
 185   1          else
 186   1          {   status = MI_ERR;   }
 187   1          
 188   1          return status;
 189   1      }
 190          
 191          /////////////////////////////////////////////////////////////////////
 192          //功    能：写数据到M1卡一块
 193          //参数说明: addr[IN]：块地址
 194          //          pData[IN]：写入的数据，16字节
 195          //返    回: 成功返回MI_OK
 196          /////////////////////////////////////////////////////////////////////                  
 197          char PcdWrite(unsigned char addr,unsigned char *pData)
 198          {
 199   1          char status;
 200   1          unsigned int  unLen;
 201   1          unsigned char i,ucComMF522Buf[MAXRLEN]; 
 202   1          
 203   1          ucComMF522Buf[0] = PICC_WRITE;
 204   1          ucComMF522Buf[1] = addr;
 205   1          CalulateCRC(ucComMF522Buf,2,&ucComMF522Buf[2]);
 206   1       
 207   1          status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,4,ucComMF522Buf,&unLen);
 208   1      
 209   1          if ((status != MI_OK) || (unLen != 4) || ((ucComMF522Buf[0] & 0x0F) != 0x0A))
 210   1          {   status = MI_ERR;   }
 211   1              
 212   1          if (status == MI_OK)
 213   1          {
 214   2              //memcpy(ucComMF522Buf, pData, 16);
 215   2              for (i=0; i<16; i++)
 216   2              {    ucComMF522Buf[i] = *(pData+i);   }
 217   2              CalulateCRC(ucComMF522Buf,16,&ucComMF522Buf[16]);
 218   2      
 219   2              status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,18,ucComMF522Buf,&unLen);
 220   2              if ((status != MI_OK) || (unLen != 4) || ((ucComMF522Buf[0] & 0x0F) != 0x0A))
 221   2              {   status = MI_ERR;   }
 222   2          }
 223   1          
 224   1          return status;
 225   1      }
 226          
 227          /////////////////////////////////////////////////////////////////////
 228          //功    能：扣款和充值
 229          //参数说明: dd_mode[IN]：命令字
 230          //               0xC0 = 扣款
 231          //               0xC1 = 充值
 232          //          addr[IN]：钱包地址
 233          //          pValue[IN]：4字节增(减)值，低位在前
 234          //返    回: 成功返回MI_OK
 235          /////////////////////////////////////////////////////////////////////                 
 236          char PcdValue(unsigned char dd_mode,unsigned char addr,unsigned char *pValue)
 237          {
 238   1          char status;
 239   1          unsigned int  unLen;
 240   1          unsigned char i,ucComMF522Buf[MAXRLEN]; 
 241   1          
C51 COMPILER V9.00   RC522                                                                 10/11/2019 10:20:02 PAGE 5   

 242   1          ucComMF522Buf[0] = dd_mode;
 243   1          ucComMF522Buf[1] = addr;
 244   1          CalulateCRC(ucComMF522Buf,2,&ucComMF522Buf[2]);
 245   1       
 246   1          status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,4,ucComMF522Buf,&unLen);
 247   1      
 248   1          if ((status != MI_OK) || (unLen != 4) || ((ucComMF522Buf[0] & 0x0F) != 0x0A))
 249   1          {   status = MI_ERR;   }
 250   1              
 251   1          if (status == MI_OK)
 252   1          {
 253   2             // memcpy(ucComMF522Buf, pValue, 4);
 254   2              for (i=0; i<16; i++)
 255   2              {    ucComMF522Buf[i] = *(pValue+i);   }
 256   2              CalulateCRC(ucComMF522Buf,4,&ucComMF522Buf[4]);
 257   2              unLen = 0;
 258   2              status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,6,ucComMF522Buf,&unLen);
 259   2              if (status != MI_ERR)
 260   2              {    status = MI_OK;    }
 261   2          }
 262   1          
 263   1          if (status == MI_OK)
 264   1          {
 265   2              ucComMF522Buf[0] = PICC_TRANSFER;
 266   2              ucComMF522Buf[1] = addr;
 267   2              CalulateCRC(ucComMF522Buf,2,&ucComMF522Buf[2]); 
 268   2         
 269   2              status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,4,ucComMF522Buf,&unLen);
 270   2      
 271   2              if ((status != MI_OK) || (unLen != 4) || ((ucComMF522Buf[0] & 0x0F) != 0x0A))
 272   2              {   status = MI_ERR;   }
 273   2          }
 274   1          return status;
 275   1      }
 276          
 277          /////////////////////////////////////////////////////////////////////
 278          //功    能：备份钱包
 279          //参数说明: sourceaddr[IN]：源地址
 280          //          goaladdr[IN]：目标地址
 281          //返    回: 成功返回MI_OK
 282          /////////////////////////////////////////////////////////////////////
 283          char PcdBakValue(unsigned char sourceaddr, unsigned char goaladdr)
 284          {
 285   1          char status;
 286   1          unsigned int  unLen;
 287   1          unsigned char ucComMF522Buf[MAXRLEN]; 
 288   1      
 289   1          ucComMF522Buf[0] = PICC_RESTORE;
 290   1          ucComMF522Buf[1] = sourceaddr;
 291   1          CalulateCRC(ucComMF522Buf,2,&ucComMF522Buf[2]);
 292   1       
 293   1          status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,4,ucComMF522Buf,&unLen);
 294   1      
 295   1          if ((status != MI_OK) || (unLen != 4) || ((ucComMF522Buf[0] & 0x0F) != 0x0A))
 296   1          {   status = MI_ERR;   }
 297   1          
 298   1          if (status == MI_OK)
 299   1          {
 300   2              ucComMF522Buf[0] = 0;
 301   2              ucComMF522Buf[1] = 0;
 302   2              ucComMF522Buf[2] = 0;
 303   2              ucComMF522Buf[3] = 0;
C51 COMPILER V9.00   RC522                                                                 10/11/2019 10:20:02 PAGE 6   

 304   2              CalulateCRC(ucComMF522Buf,4,&ucComMF522Buf[4]);
 305   2       
 306   2              status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,6,ucComMF522Buf,&unLen);
 307   2              if (status != MI_ERR)
 308   2              {    status = MI_OK;    }
 309   2          }
 310   1          
 311   1          if (status != MI_OK)
 312   1          {    return MI_ERR;   }
 313   1          
 314   1          ucComMF522Buf[0] = PICC_TRANSFER;
 315   1          ucComMF522Buf[1] = goaladdr;
 316   1      
 317   1          CalulateCRC(ucComMF522Buf,2,&ucComMF522Buf[2]);
 318   1       
 319   1          status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,4,ucComMF522Buf,&unLen);
 320   1      
 321   1          if ((status != MI_OK) || (unLen != 4) || ((ucComMF522Buf[0] & 0x0F) != 0x0A))
 322   1          {   status = MI_ERR;   }
 323   1      
 324   1          return status;
 325   1      }
 326          
 327          
 328          /////////////////////////////////////////////////////////////////////
 329          //功    能：命令卡片进入休眠状态
 330          //返    回: 成功返回MI_OK
 331          /////////////////////////////////////////////////////////////////////
 332          char PcdHalt(void)
 333          {
 334   1          char status;
 335   1          unsigned int  unLen;
 336   1          unsigned char ucComMF522Buf[MAXRLEN]; 
 337   1      
 338   1          ucComMF522Buf[0] = PICC_HALT;
 339   1          ucComMF522Buf[1] = 0;
 340   1          CalulateCRC(ucComMF522Buf,2,&ucComMF522Buf[2]);
 341   1       
 342   1          status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,4,ucComMF522Buf,&unLen);
 343   1      
 344   1          return MI_OK;
 345   1      }
 346          
 347          /////////////////////////////////////////////////////////////////////
 348          //用MF522计算CRC16函数
 349          /////////////////////////////////////////////////////////////////////
 350          void CalulateCRC(unsigned char *pIndata,unsigned char len,unsigned char *pOutData)
 351          {
 352   1          unsigned char i,n;
 353   1          ClearBitMask(DivIrqReg,0x04);
 354   1          WriteRawRC(CommandReg,PCD_IDLE);
 355   1          SetBitMask(FIFOLevelReg,0x80);
 356   1          for (i=0; i<len; i++)
 357   1          {   WriteRawRC(FIFODataReg, *(pIndata+i));   }
 358   1          WriteRawRC(CommandReg, PCD_CALCCRC);
 359   1          i = 0xFF;
 360   1          do 
 361   1          {
 362   2              n = ReadRawRC(DivIrqReg);
 363   2              i--;
 364   2          }
 365   1          while ((i!=0) && !(n&0x04));
C51 COMPILER V9.00   RC522                                                                 10/11/2019 10:20:02 PAGE 7   

 366   1          pOutData[0] = ReadRawRC(CRCResultRegL);
 367   1          pOutData[1] = ReadRawRC(CRCResultRegM);
 368   1      }
 369          
 370          /////////////////////////////////////////////////////////////////////
 371          //功    能：复位RC522
 372          //返    回: 成功返回MI_OK
 373          /////////////////////////////////////////////////////////////////////
 374          char PcdReset(void)
 375          {
 376   1        //unsigned char i;
 377   1          MF522_RST=1;
 378   1      
 379   1          _nop_();                  
 380   1      
 381   1          MF522_RST=0;
 382   1      
 383   1          _nop_();                   
 384   1      
 385   1          MF522_RST=1;
 386   1      
 387   1          delay2(10);               
 388   1        
 389   1          WriteRawRC(CommandReg,PCD_RESETPHASE);
 390   1      
 391   1          _nop_();                  
 392   1        
 393   1          
 394   1          WriteRawRC(ModeReg,0x3D);            //和Mifare卡通讯，CRC初始值0x6363
 395   1          WriteRawRC(TReloadRegL,30);           
 396   1          WriteRawRC(TReloadRegH,0);
 397   1          WriteRawRC(TModeReg,0x8D);
 398   1          WriteRawRC(TPrescalerReg,0x3E);
 399   1         WriteRawRC(TxAutoReg,0x40);
 400   1          return MI_OK;
 401   1      }
 402          
 403          /////////////////////////////////////////////////////////////////////
 404          //功    能：读RC632寄存器
 405          //参数说明：Address[IN]:寄存器地址
 406          //返    回：读出的值
 407          /////////////////////////////////////////////////////////////////////
 408          unsigned char ReadRawRC(unsigned char Address)
 409          {
 410   1           unsigned char i, ucAddr;
 411   1           unsigned char ucResult=0;
 412   1      
 413   1           MF522_SCK = 0;
 414   1           MF522_SDA = 0;
 415   1           ucAddr = ((Address<<1)&0x7E)|0x80;
 416   1      
 417   1           for(i=8;i>0;i--)
 418   1           {
 419   2               MF522_MOSI = ((ucAddr&0x80)==0x80);
 420   2               MF522_SCK = 1;
 421   2               ucAddr <<= 1;
 422   2               MF522_SCK = 0;
 423   2           }
 424   1      
 425   1           for(i=8;i>0;i--)
 426   1           {
 427   2               MF522_SCK = 1;
C51 COMPILER V9.00   RC522                                                                 10/11/2019 10:20:02 PAGE 8   

 428   2               ucResult <<= 1;
 429   2               ucResult|=(bit)MF522_MISO;
 430   2               MF522_SCK = 0;
 431   2           }
 432   1      
 433   1           MF522_SDA = 1;
 434   1           MF522_SCK = 1;
 435   1           return ucResult;
 436   1      }
 437          
 438          /////////////////////////////////////////////////////////////////////
 439          //功    能：写RC632寄存器
 440          //参数说明：Address[IN]:寄存器地址
 441          //          value[IN]:写入的值
 442          /////////////////////////////////////////////////////////////////////
 443          void WriteRawRC(unsigned char Address, unsigned char value)
 444          {  
 445   1          unsigned char i, ucAddr;
 446   1      
 447   1          MF522_SCK = 0;
 448   1          MF522_SDA = 0;
 449   1          ucAddr = ((Address<<1)&0x7E);
 450   1      
 451   1          for(i=8;i>0;i--)
 452   1          {
 453   2              MF522_MOSI = ((ucAddr&0x80)==0x80);
 454   2              MF522_SCK = 1;
 455   2              ucAddr <<= 1;
 456   2              MF522_SCK = 0;
 457   2          }
 458   1      
 459   1          for(i=8;i>0;i--)
 460   1          {
 461   2              MF522_MOSI = ((value&0x80)==0x80);
 462   2              MF522_SCK = 1;
 463   2              value <<= 1;
 464   2              MF522_SCK = 0;
 465   2          }
 466   1          MF522_SDA = 1;
 467   1          MF522_SCK = 1;
 468   1      }
 469          
 470          /////////////////////////////////////////////////////////////////////
 471          //功    能：置RC522寄存器位
 472          //参数说明：reg[IN]:寄存器地址
 473          //          mask[IN]:置位值
 474          /////////////////////////////////////////////////////////////////////
 475          void SetBitMask(unsigned char reg,unsigned char mask)  
 476          {
 477   1          char tmp = 0x0;
 478   1          tmp = ReadRawRC(reg);
 479   1          WriteRawRC(reg,tmp | mask);  // set bit mask
 480   1      }
 481          
 482          /////////////////////////////////////////////////////////////////////
 483          //功    能：清RC522寄存器位
 484          //参数说明：reg[IN]:寄存器地址
 485          //          mask[IN]:清位值
 486          /////////////////////////////////////////////////////////////////////
 487          void ClearBitMask(unsigned char reg,unsigned char mask)  
 488          {
 489   1          char tmp = 0x0;
C51 COMPILER V9.00   RC522                                                                 10/11/2019 10:20:02 PAGE 9   

 490   1          tmp = ReadRawRC(reg);
 491   1          WriteRawRC(reg, tmp & ~mask);  // clear bit mask
 492   1      } 
 493          
 494          /////////////////////////////////////////////////////////////////////
 495          //功    能：通过RC522和ISO14443卡通讯
 496          //参数说明：Command[IN]:RC522命令字
 497          //          pInData[IN]:通过RC522发送到卡片的数据
 498          //          InLenByte[IN]:发送数据的字节长度
 499          //          pOutData[OUT]:接收到的卡片返回数据
 500          //          *pOutLenBit[OUT]:返回数据的位长度
 501          /////////////////////////////////////////////////////////////////////
 502          char PcdComMF522(unsigned char Command, 
 503                           unsigned char *pInData, 
 504                           unsigned char InLenByte,
 505                           unsigned char *pOutData, 
 506                           unsigned int  *pOutLenBit)
 507          {
 508   1          char status = MI_ERR;
 509   1          unsigned char irqEn   = 0x00;
 510   1          unsigned char waitFor = 0x00;
 511   1          unsigned char lastBits;
 512   1          unsigned char n;
 513   1          unsigned int i;
 514   1          switch (Command)
 515   1          {
 516   2             case PCD_AUTHENT:
 517   2                irqEn   = 0x12;
 518   2                waitFor = 0x10;
 519   2                break;
 520   2             case PCD_TRANSCEIVE:
 521   2                irqEn   = 0x77;
 522   2                waitFor = 0x30;
 523   2                break;
 524   2             default:
 525   2               break;
 526   2          }
 527   1         
 528   1          WriteRawRC(ComIEnReg,irqEn|0x80);
 529   1          ClearBitMask(ComIrqReg,0x80);
 530   1          WriteRawRC(CommandReg,PCD_IDLE);
 531   1          SetBitMask(FIFOLevelReg,0x80);
 532   1          
 533   1          for (i=0; i<InLenByte; i++)
 534   1          {   WriteRawRC(FIFODataReg, pInData[i]);    }
 535   1          WriteRawRC(CommandReg, Command);
 536   1         
 537   1          
 538   1          if (Command == PCD_TRANSCEIVE)
 539   1          {    SetBitMask(BitFramingReg,0x80);  }
 540   1          
 541   1          i = 600;//根据时钟频率调整，操作M1卡最大等待时间25ms
 542   1          do 
 543   1          {
 544   2               n = ReadRawRC(ComIrqReg);
 545   2               i--;
 546   2          }
 547   1          while ((i!=0) && !(n&0x01) && !(n&waitFor));
 548   1          ClearBitMask(BitFramingReg,0x80);
 549   1              
 550   1          if (i!=0)
 551   1          {    
C51 COMPILER V9.00   RC522                                                                 10/11/2019 10:20:02 PAGE 10  

 552   2               if(!(ReadRawRC(ErrorReg)&0x1B))
 553   2               {
 554   3                   status = MI_OK;
 555   3                   if (n & irqEn & 0x01)
 556   3                   {   status = MI_NOTAGERR;   }
 557   3                   if (Command == PCD_TRANSCEIVE)
 558   3                   {
 559   4                      n = ReadRawRC(FIFOLevelReg);
 560   4                      lastBits = ReadRawRC(ControlReg) & 0x07;
 561   4                      if (lastBits)
 562   4                      {   *pOutLenBit = (n-1)*8 + lastBits;   }
 563   4                      else
 564   4                      {   *pOutLenBit = n*8;   }
 565   4                      if (n == 0)
 566   4                      {   n = 1;    }
 567   4                      if (n > MAXRLEN)
 568   4                      {   n = MAXRLEN;   }
 569   4                      for (i=0; i<n; i++)
 570   4                      {   pOutData[i] = ReadRawRC(FIFODataReg);    }
 571   4                  }
 572   3               }
 573   2               else
 574   2               {   status = MI_ERR;   }
 575   2              
 576   2         }
 577   1         
 578   1      
 579   1         SetBitMask(ControlReg,0x80);           // stop timer now
 580   1         WriteRawRC(CommandReg,PCD_IDLE); 
 581   1         return status;
 582   1      }
 583          
 584          
 585          /////////////////////////////////////////////////////////////////////
 586          //开启天线  
 587          //每次启动或关闭天险发射之间应至少有1ms的间隔
 588          /////////////////////////////////////////////////////////////////////
 589          void PcdAntennaOn()
 590          {
 591   1          unsigned char i;
 592   1          i = ReadRawRC(TxControlReg);
 593   1          if (!(i & 0x03))
 594   1          {
 595   2              SetBitMask(TxControlReg, 0x03);
 596   2          }
 597   1      }
 598          
 599          
 600          /////////////////////////////////////////////////////////////////////
 601          //关闭天线
 602          /////////////////////////////////////////////////////////////////////
 603          void PcdAntennaOff()
 604          {
 605   1          ClearBitMask(TxControlReg, 0x03);
 606   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2440    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----     238
C51 COMPILER V9.00   RC522                                                                 10/11/2019 10:20:02 PAGE 11  

   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
